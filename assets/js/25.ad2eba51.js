(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{430:function(e,t,i){"use strict";i.r(t);var o=i(9),l=Object(o.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h2",{attrs:{id:"_1-intro"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-intro"}},[e._v("#")]),e._v(" 1. Intro")]),e._v(" "),i("ul",[i("li",[e._v("Why Study Algorithms\n"),i("ul",[i("li",[e._v("technology innovation")]),e._v(" "),i("li",[e._v("provides the lens outside the computer science")])])]),e._v(" "),i("li",[e._v("Integer multiplication\n"),i("ul",[i("li",[e._v("product X,Y .")])]),e._v(" "),i("blockquote",[i("p",[e._v("product means output")])])]),e._v(" "),i("li",[e._v("Karatsuba multiplication\n"),i("ul",[i("li",[e._v("recursive")])]),e._v(" "),i("blockquote",[i("p",[e._v("call you self")])]),e._v(" "),i("ul",[i("li",[e._v("base case")])]),e._v(" "),i("blockquote",[i("p",[e._v("basic situation of something")])]),e._v(" "),i("ul",[i("li",[e._v("refine")])]),e._v(" "),i("blockquote",[i("p",[e._v("optimise")])])])]),e._v(" "),i("h2",{attrs:{id:"_2-sorting"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-sorting"}},[e._v("#")]),e._v(" 2. Sorting")]),e._v(" "),i("ul",[i("li",[i("h3",{attrs:{id:"buble"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#buble"}},[e._v("#")]),e._v(" buble")]),e._v(" "),i("ul",[i("li",[e._v("compare every item with its neighbour A & B")]),e._v(" "),i("li",[e._v("if A is bigger then switch two items's position")]),e._v(" "),i("li",[e._v("do the loop from the first item to last item so there will be n item")]),e._v(" "),i("li",[e._v("the first item do n-1 times, last item do 0 times")]),e._v(" "),i("li",[e._v("(n-1 + 0)* n / 2 times overall")]),e._v(" "),i("li",[e._v("so the time complexity is O(n^2)")])])]),e._v(" "),i("li",[i("h3",{attrs:{id:"selection"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#selection"}},[e._v("#")]),e._v(" selection")]),e._v(" "),i("blockquote",[i("p",[e._v('"finding the smallest one first.\nbut we can also find the biggest one instead "')])]),e._v(" "),i("ul",[i("li",[e._v("Loop (n-1) times // O(N)\n"),i("ul",[i("li",[e._v("set the first one as the SMALLEST one")]),e._v(" "),i("li",[e._v("loop and compare every one if they are smaller than the SMALLEST one // O (N)\n"),i("ul",[i("li",[e._v("if some one did then set its value to the new SMALLEST")])])]),e._v(" "),i("li",[e._v("change their position ( new Smallest and the SMALLEST we set before the loop) // O(1)")])])]),e._v(" "),i("li",[e._v("Still O(n^2)")])])]),e._v(" "),i("li",[i("h3",{attrs:{id:"insertsort"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#insertsort"}},[e._v("#")]),e._v(" InsertSort")]),e._v(" "),i("blockquote",[i("p",[e._v('"insert the unordered items into the ordered sequence like a poker"')])]),e._v(" "),i("ul",[i("li",[e._v("Loop( i =1 i< array.length i++)\n"),i("ul",[i("li",[e._v('if (array[i] < array[i-1]) {\n"Start from left, go to right. when right is bigger than left , start the follow loop"\n'),i("ul",[i("li",[e._v('int temp  = array[i]\n"to store the one we are working on. But we don\'t change others only focus on this one (who become the temp)"')]),e._v(" "),i("li",[e._v('int j = i\n"we want to operate it so we create a new agent "j""')]),e._v(" "),i("li",[e._v('while ( j>0 && temp< array[j-1]){\n"we are actually pull out the temp(array[i]) out and operates others "\n'),i("ul",[i("li",[e._v('array[j] = array[j-1]\n"just let the left item become the right one. and leave temp. temp is still temp(don\'t change temp now . So this will just work on everyone to change their number equals to left one )"')]),e._v(" "),i("li",[e._v("j--\n"),i("blockquote",[i("p",[e._v('"https://pic3.zhimg.com/v2-91b76e8e4dab9b0cad9a017d7dd431e2_b.webp"')])])])])]),e._v(" "),i("li",[e._v("array[j] = temp")])])])])]),e._v(" "),i("li",[e._v("Overall: O(N) in best case ( good order) and O(N*N)=O(N^2) in bad case")])])]),e._v(" "),i("li",[i("h3",{attrs:{id:"merge-sort"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#merge-sort"}},[e._v("#")]),e._v(" Merge Sort")]),e._v(" "),i("ul",[i("li",[e._v("things to do\n"),i("ul",[i("li",[e._v("divide into two part")]),e._v(" "),i("li",[e._v("recursive each")]),e._v(" "),i("li",[e._v("combine")])])]),e._v(" "),i("li",[e._v("How to combine\n"),i("ul",[i("li",[e._v("C = output [length = n]")]),e._v(" "),i("li",[e._v("A = 1st sorted array [n/2]")]),e._v(" "),i("li",[e._v("B = 2nd sorted array [n/2]")]),e._v(" "),i("li",[e._v("i=1 j=1")]),e._v(" "),i("li",[e._v("for k = 1 to n\n"),i("ul",[i("li",[e._v("if A(i)<B(j)\n"),i("ul",[i("li",[e._v("C(k) = A(i)")]),e._v(" "),i("li",[e._v("i++")])])]),e._v(" "),i("li",[e._v("else B(j)<A(i)\n"),i("ul",[i("li",[e._v("C(k) = B(j)")]),e._v(" "),i("li",[e._v("j++")])])])])]),e._v(" "),i("li",[e._v("end")])])]),e._v(" "),i("li",[i("h2",{attrs:{id:"running-time"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#running-time"}},[e._v("#")]),e._v(" Running Time")])])])])])])}),[],!1,null,null,null);t.default=l.exports}}]);